// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  name          String
  password      String
  role          Role         @default(STUDENT)
  classId       String?      // For students to be assigned to a class
  class         Class?       @relation("StudentClass", fields: [classId], references: [id])
  teacherClasses Class[]     @relation("TeacherClasses")
  attendances   Attendance[] // For both students' and teachers' attendance records
  qrCode        String?      // QR Code data for authentication
  faceEmbedding FaceEmbedding?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Class {
  id          String     @id @default(uuid())
  grade       Int
  section     String
  teacherId   String?
  teacher     User?      @relation("TeacherClasses", fields: [teacherId], references: [id])
  students    User[]     @relation("StudentClass")
  schedule    Schedule?  // Class schedule based on grade
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Schedule {
  id        String   @id @default(uuid())
  classId   String   @unique
  class     Class    @relation(fields: [classId], references: [id])
  startTime String   // e.g., "07:30" for Grades 1-3, "12:35" for Grades 4-6
  endTime   String   // e.g., "11:30" for Grades 1-3, "17:30" for Grades 4-6
  timezone  String   @default("Asia/Manila") // Philippine time
  daysOfWeek String @default("MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY") // Active days
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  status    Status   @default(PRESENT)
  timeIn    String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  classDate String?  // Format: "YYYY-MM-DD" for easier querying
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, classDate]) // Ensure one attendance record per user per day
}

model FaceEmbedding {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  embedding  String   // Stored as JSON string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Status {
  PRESENT
  ABSENT
  LATE
}